// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package zz

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Zz899XndClient is the client API for Zz899Xnd service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Zz899XndClient interface {
	Heathcheck123Aaa(ctx context.Context, in *HealthcheckRequest, opts ...grpc.CallOption) (*HealthcheckResponse, error)
	Helloworld_89Anc(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
}

type zz899XndClient struct {
	cc grpc.ClientConnInterface
}

func NewZz899XndClient(cc grpc.ClientConnInterface) Zz899XndClient {
	return &zz899XndClient{cc}
}

func (c *zz899XndClient) Heathcheck123Aaa(ctx context.Context, in *HealthcheckRequest, opts ...grpc.CallOption) (*HealthcheckResponse, error) {
	out := new(HealthcheckResponse)
	err := c.cc.Invoke(ctx, "/zz.zz.Zz899_xnd/Heathcheck123_aaa", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zz899XndClient) Helloworld_89Anc(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/zz.zz.Zz899_xnd/Helloworld_89_anc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Zz899XndServer is the server API for Zz899Xnd service.
// All implementations must embed UnimplementedZz899XndServer
// for forward compatibility
type Zz899XndServer interface {
	Heathcheck123Aaa(context.Context, *HealthcheckRequest) (*HealthcheckResponse, error)
	Helloworld_89Anc(context.Context, *HelloRequest) (*HelloReply, error)
	mustEmbedUnimplementedZz899XndServer()
}

// UnimplementedZz899XndServer must be embedded to have forward compatible implementations.
type UnimplementedZz899XndServer struct {
}

func (UnimplementedZz899XndServer) Heathcheck123Aaa(context.Context, *HealthcheckRequest) (*HealthcheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heathcheck123Aaa not implemented")
}
func (UnimplementedZz899XndServer) Helloworld_89Anc(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Helloworld_89Anc not implemented")
}
func (UnimplementedZz899XndServer) mustEmbedUnimplementedZz899XndServer() {}

// UnsafeZz899XndServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Zz899XndServer will
// result in compilation errors.
type UnsafeZz899XndServer interface {
	mustEmbedUnimplementedZz899XndServer()
}

func RegisterZz899XndServer(s grpc.ServiceRegistrar, srv Zz899XndServer) {
	s.RegisterService(&Zz899Xnd_ServiceDesc, srv)
}

func _Zz899Xnd_Heathcheck123Aaa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthcheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Zz899XndServer).Heathcheck123Aaa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zz.zz.Zz899_xnd/Heathcheck123_aaa",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Zz899XndServer).Heathcheck123Aaa(ctx, req.(*HealthcheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zz899Xnd_Helloworld_89Anc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Zz899XndServer).Helloworld_89Anc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zz.zz.Zz899_xnd/Helloworld_89_anc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Zz899XndServer).Helloworld_89Anc(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Zz899Xnd_ServiceDesc is the grpc.ServiceDesc for Zz899Xnd service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Zz899Xnd_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zz.zz.Zz899_xnd",
	HandlerType: (*Zz899XndServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Heathcheck123_aaa",
			Handler:    _Zz899Xnd_Heathcheck123Aaa_Handler,
		},
		{
			MethodName: "Helloworld_89_anc",
			Handler:    _Zz899Xnd_Helloworld_89Anc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Zz.proto",
}
